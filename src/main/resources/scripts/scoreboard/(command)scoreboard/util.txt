/*
This is the a utility script file for the 'scoreboard' sub-command.
It contains the majority of the implementation logic for the command.

DO NOT MODIFY ANY PORTION OF THIS SCRIPT FILE OR ANY OTHER SCRIPT FILES
EXCEPT WHERE INDICATED BY COMMENTS. DOING SO MAY CAUSE BREAK THE SCRIPT.
Ignore this warning only if you have read the scripting language specifications
thoroughly and are confident in your abilities to successfully modify the script.

@author Utkarsh Priyam
@version December 30, 2020
*/

// --------------------------------------------------------------------------------- //
// DO NOT MODIFY ANY CODE BEYOND THIS POINT (see warning in the file header comment) //
// --------------------------------------------------------------------------------- //

#include command "../(command)scoreboard.txt"

#ref MapEntry java.util.Map.Entry

import org.apache.commons.collections4;
import org.apache.commons.collections4.multimap;

import org.bukkit;
import org.bukkit.entity;
import org.bukkit.scoreboard;

import java.util;

void updatePlayerScoreboard(Player player) {
   ScoreboardManager manager = Objects.requireNonNull(Bukkit.getScoreboardManager());
   Scoreboard currentBoard = player.getScoreboard();
   Scoreboard mainBoard = manager.getMainScoreboard();
   if (currentBoard == mainBoard) {
      currentBoard = manager.getNewScoreboard();
      player.setScoreboard(currentBoard);
   }

   String[] config = getOrCreateConfig(player.getName());
   for (int i = 0; i < 3; i++) {
      Objective mainObjective = null;

      String conf = config[i];
      if ("".equals(conf)) config[i] = null;
      else if (conf != null) {
         Objective oldObj = currentBoard.getObjective(displaySlots[i]);
         if (oldObj != null) {
            if (conf.equals(oldObj.getName())) continue; // skip slot if already set correctly

            Objective mainObj = mainBoard.getObjective(oldObj.getName());
            objectiveMap.removeMapping(mainObj, oldObj);
            currentBoard.clearSlot(displaySlots[i]);
         }
         if (conf.equals(command::SLOT_DISABLE_CODE)) continue; // disable this scoreboard display slot

         mainObjective = mainBoard.getObjective(conf);
         if (mainObjective == null) {
            player.sendMessage(command::WARNING_MESSAGE_COLOR + "Unable to find objective: " + conf);
            player.sendMessage(command::WARNING_MESSAGE_COLOR + "Loading in default server scoreboard");
            config[i] = null;
         }
      }

      if (mainObjective == null) mainObjective = mainBoard.getObjective(displaySlots[i]);

      if (mainObjective != null) {
         String objectiveName = mainObjective.getName();

         Objective newObjective = currentBoard.getObjective(objectiveName);
         if (newObjective == null) {
            String criteria = mainObjective.getCriteria(), displayName = mainObjective.getDisplayName();
            newObjective = currentBoard.registerNewObjective(objectiveName, criteria, displayName);
         }

         restockScores(mainObjective, newObjective);
         objectiveMap.put(mainObjective, newObjective);
         newObjective.setDisplaySlot(displaySlots[i]);
      }
   }
}

void restockScores(Objective oldObjective, Objective newObjective) {
   for (OfflinePlayer player : $ALL_PLAYERS) {
      String name = player.getName();
      if (name != null) newObjective.getScore(name).setScore(oldObjective.getScore(name).getScore());
   }
}

String[] getOrCreateConfig(String playerName) {
   String[] config = (String[]) settings.get(playerName);
   if (config == null) settings.put(playerName, config = new String[3]);
   return config;
}

MultiValuedMap objectiveMap = new HashSetValuedHashMap();
Map settings = new HashMap();
DisplaySlot[] displaySlots = {DisplaySlot.BELOW_NAME, DisplaySlot.PLAYER_LIST, DisplaySlot.SIDEBAR};

callback ObjectiveUpdater {
   void run() {
      for ($MapEntry e : objectiveMap.entries()) restockScores((Objective) e.getKey(), (Objective) e.getValue());
   }
}

// --------------------------------------------------------------------------------- //
//                                    END OF CODE                                    //
// --------------------------------------------------------------------------------- //

/*
MIT License

Copyright (c) 2020 Utkarsh Priyam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
