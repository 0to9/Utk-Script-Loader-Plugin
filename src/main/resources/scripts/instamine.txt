/*
 * This is the main script file for adding instamine-like functionality
 * for many blocks which do not support it in the default vanilla game.
 *
 * This instamine script is modularized by general block type categories,
 * each of which is defined more explicitly in its own script file.
 * To customize or configure which modules are active, simply comment or
 * uncomment individual '#include' statements corresponding to each category.
 *
 * DO NOT MODIFY ANY PORTION OF THIS SCRIPT FILE OR ANY OTHER SCRIPT FILES
 * EXCEPT WHERE INDICATED BY COMMENTS. DOING SO MAY CAUSE BREAK THE SCRIPT.
 * Ignore this warning only if you have read the scripting language specifications
 * thoroughly and are confident in your abilities to successfully modify the script.
 *
 * @author Utkarsh Priyam
 * @version December 18, 2020
 */

// --------------------------------------------------------------------------------- //
// This is the script configuration section (see warning in the file header comment) //
// --------------------------------------------------------------------------------- //

#include ores               "instamine/ores.txt"
#include glass              "instamine/glass.txt"
#include concrete           "instamine/concrete.txt"
#include logs               "instamine/logs.txt"
#include wood_products      "instamine/wood_products.txt"
#include stone_products     "instamine/stone_products.txt"
#include lighting_blocks    "instamine/lighting_blocks.txt"
#include blocks_of          "instamine/blocks_of.txt"

// --------------------------------------------------------------------------------- //
// DO NOT MODIFY ANY CODE BEYOND THIS POINT (see warning in the file header comment) //
// --------------------------------------------------------------------------------- //

import java.util;

import org.bukkit;
import org.bukkit.block;
import org.bukkit.enchantments;
import org.bukkit.entity;
import org.bukkit.event.block;
import org.bukkit.event.player;
import org.bukkit.inventory;
import org.bukkit.inventory.meta;
import org.bukkit.potion;

/**
 * Called whenever a PlayerInteractEvent occurs
 *
 * For each module of Instamine, if it is included, this
 * method checks if the block type is valid for that
 * module, and, if so, attempts to break that block.
 *
 * It also prevents any further modules from trying to
 * break the block. This second condition is necessary
 * to prevent block duping by poorly written module scripts.
 */
@PlayerInteract : {
    PlayerInteractEvent event = (PlayerInteractEvent) wrapper.getEvent();
    if (event.getAction() != Action.LEFT_CLICK_BLOCK)
        return;

    Block block = event.getClickedBlock();
    if (block == null)
        return;

    Material blockType = block.getType();
    if (false);

    $ifIncluded(ores) {
        else if (ores::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), ores::validTools,
                        ores::minHaste, ores::minEfficiency);
    }
    $ifIncluded(glass) {
        else if (glass::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), glass::validTools,
                        glass::minHaste, glass::minEfficiency);
    }
    $ifIncluded(concrete) {
        else if (concrete::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), concrete::validTools,
                        concrete::minHaste, concrete::minEfficiency);
    }
    $ifIncluded(logs) {
        else if (logs::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), logs::validTools,
                        logs::minHaste, logs::minEfficiency);
    }
    $ifIncluded(wood_products) {
        else if (wood_products::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), wood_products::validTools,
                        wood_products::minHaste, wood_products::minEfficiency);
    }
    $ifIncluded(stone_products) {
        else if (stone_products::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), stone_products::validTools,
                        stone_products::minHaste, stone_products::minEfficiency);
    }
    $ifIncluded(lighting_blocks) {
        else if (lighting_blocks::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), lighting_blocks::validTools,
                        lighting_blocks::minHaste, lighting_blocks::minEfficiency);
    }
    $ifIncluded(blocks_of) {
        else if (blocks_of::validTypes.contains(blockType))
            breakBlock(block, event.getPlayer(), blocks_of::validTools,
                        blocks_of::minHaste, blocks_of::minEfficiency);
    }
}

/**
 * Breaks the specified block if and only if the given player
 * has the right potion effects, has a valid tool, and the tool
 * has the minimum required level of the Efficiency enchantment
 *
 * @param block         The block to be instamined
 * @param player        The player who is currenly mining
 * @param validTools    A set of all valid tools for the instamine
 * @param minHaste      The minimum level of Haste required for the instamine
 * @param minEfficiency The minimum level of Efficiency required for the instamine
 */
void breakBlock(Block block, Player player, Set validTools, int minHaste, int minEfficiency) {
    // Make sure player has the minimum required level of Haste effect
    PotionEffect potionEffect = player.getPotionEffect(PotionEffectType.FAST_DIGGING);
    if (potionEffect == null || potionEffect.getAmplifier() < minHaste - 1)
        return;

    // Make sure player does not have Mining Fatigue
    potionEffect = player.getPotionEffect(PotionEffectType.SLOW_DIGGING);
    if (potionEffect != null)
        return;

    // Make sure player is using a valid tool with the minimum required level of Efficiency
    ItemStack mainHandItem = player.getInventory().getItemInMainHand();
    Material itemType = mainHandItem.getType();
    if (!validTools.contains(itemType))
        return;
    if (mainHandItem.getEnchantmentLevel(Enchantment.DIG_SPEED) < minEfficiency)
        return;

    // Calculate chance of durability loss from item's Unbreaking enchantment level
    int unbreakingLevel = mainHandItem.getEnchantmentLevel(Enchantment.DURABILITY);
    double chance = 1.0 / (unbreakingLevel + 1.0);
    if (Math.random() < chance) {
        Damageable damageable = ((Damageable) mainHandItem.getItemMeta());
        if (damageable == null)
            return;
        damageable.setDamage(damageable.getDamage() + 1);
        mainHandItem.setItemMeta((ItemMeta) damageable);
    }

    // (Naturally) Drop 1 of the item of the block in the world at the location of the block
    block.breakNaturally(mainHandItem);
}

// --------------------------------------------------------------------------------- //
//                                    END OF CODE                                    //
// --------------------------------------------------------------------------------- //

/*
MIT License

Copyright (c) 2020 Utkarsh Priyam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/